RX (http://www.introtorx.com)

using System.Reactive.Linq;
var subscription = SharedState.GearChanged.Subscribe(x => ffb2.CallActivateButton(vJoyTypes.Virtual, MappedButtons.LandingGearToggle, 200));

ffb2.Subscribe(x => {
                var current = x.Current as State;
                var previous = x.Previous as State;

                if (TestButtonReleased(previous.buttons, current.buttons, (uint)Button.Button25))
                {
                    CallActivateButton(vJoyTypes.Virtual, MappedButtons.Throttle75, 200);
                    log.Debug("75% throttle");
                }
            });

Newtonsoft JSON

string json = JsonConvert.SerializeObject(dataObject);
var dataObject = JsonConvert.DeserializeObject<DataObject>(json);
dynamic dyn = = JsonConvert.DeserializeObject(json);

async/await

continuations

Task.Run(async () => await MethodAsync(param1, param1)).ContinueWith(t => { log.Error($"Exception: {t.Exception}"); }, TaskContinuationOptions.OnlyOnFaulted);


var someTask = MethodAsync().ContinueWith(async (t) =>
{
	if (t.IsCanceled)
	{
		logger.LogWarning($"MethodAsync: canceled");
	}
	else if (t.IsFaulted)
	{
		// Logging and Auditing 

		// Pull the innermost exception
		Exception ex = t.Exception;
		while (ex is AggregateException && ex.InnerException != null)
			ex = ex.InnerException;

		logger.LogError(t.Exception, $"MethodAsync: Error, Message {ex}");
	}
	else if (t.IsCompleted)
	{
		logger.LogDebug("MethodAsync: completed");
		await SomeOtherAsync().ConfigureAwait(false);
	}
}

await someTask.ConfigureAwait(false);


// Using Task.Factory.StartNew() correctly

// StartNew wraps the task.  Call Unwrap() to get the real task.
startNewTask = Task.Factory.StartNew(async () => await SomeAsync(CancellationTokenSource.Token).ConfigureAwait(false),
    CancellationTokenSource.Token, TaskCreationOptions.LongRunning, TaskScheduler.Default).Unwrap();

// Log all the ways that this can stop
startNewTask.ContinueWith(t => {
    if (t.IsCanceled) logger?.LogDebug("SomeAsync() cancelled");
    else if (t.IsFaulted) logger?.LogError($"SomeAsync() Exception: {t.Exception.InnerException?.Message}");
    else logger?.LogDebug("SomeAsync() complete");
});


log4net

private static readonly log4net.ILog log = log4net.LogManager.GetLogger(System.Reflection.MethodBase.GetCurrentMethod().DeclaringType);

Streaming JSON Serializer

		class OutputStringWriter : StringWriter
        {
            private StringWriter InternalBuffer { get; set; } = new StringWriter();

            public override void Write(char value)
            {
                InternalBuffer.Write(value);
            }
            public override void Write(char[] buffer, int index, int count)
            {
                InternalBuffer.Write(buffer, index, count);
            }
            public override void Write(string value)
            {
                InternalBuffer.Write(value);
            }

            public string GetBuffer()
            {
                var text = InternalBuffer.ToString();
                InternalBuffer = new StringWriter();
                return text;
            }
        }
		
		public async Task<IEnumerable<byte[]>> ReadBytes()
        {
            return await Task.FromResult(ReadLines(TextReader));
        }
		
		private static IEnumerable<byte[]> ReadLines(TextReader textReader)
        {
            OutputStringWriter sw = new OutputStringWriter();
            JsonTextWriter writer = new JsonTextWriter(sw);
            
            // Output the beginning of the array
            writer.WriteStartArray();
            
            while (true)
            {
                var line = textReader.ReadLine();

                if (null == line) break;  // Done reading

                // Output the JSON object start character
                writer.WriteStartObject();

				// Write the key:value data
				writer.WritePropertyName("key");
				writer.WriteValue("value");

                // Close the JSON object
                writer.WriteEndObject();

                // Return the formatted JSON to the caller
                yield return Encoding.UTF8.GetBytes(sw.GetBuffer());
            }

            // Close the array
            writer.WriteEndArray();

            // Return the formatted JSON to the caller
            yield return Encoding.UTF8.GetBytes(sw.GetBuffer());
        }
		
		foreach(var byteArray in await reader.ReadBytes())
        {
			await output.WriteAsync(byteArray);
        }
		
		
		
Linq find with custom default value if empty

	var result = Enumerable.Where(x => x.value == "value").Select(x => x.key).DefaultIfEmpty("not found").First();
	

Linq out variables from TryParse

	var results = ["1", "2", "a"].Select(x => { Int32.TryParse(x, out var value); return value; }).Where(x => x != null);